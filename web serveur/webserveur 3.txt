🔥 epoll() : L'arme secrète des serveurs web ultra-performants !
epoll() est un mécanisme de multiplexing d’entrées/sorties asynchrone disponible uniquement sur Linux. Il permet à un seul thread de gérer des milliers de connexions simultanément sans consommer beaucoup de ressources CPU.

1️⃣ Pourquoi epoll() est-il plus performant que select() et poll() ?
Problème avec select() et poll()
❌ select() et poll() scannent tous les sockets à chaque appel : Si on a 10 000 clients, il faut parcourir 10 000 sockets à chaque requête ! 🚨

✅ epoll() enregistre les sockets intéressants une seule fois et est notifié uniquement quand un événement se produit.

Méthode	Parcours de tous les sockets ?	Limite de fichiers ouverts ?	Performances
select()	✅ OUI, chaque appel	❌ 1024 sockets max	🔴 Très lent
poll()	✅ OUI, chaque appel	✅ Pas de limite fixe	🟠 Moyen
epoll()	❌ NON, suit les sockets actifs	✅ Pas de limite fixe	🟢 Super rapide
📌 Gros avantage de epoll() : Il évite de boucler inutilement sur tous les sockets 🔥

2️⃣ Comment fonctionne epoll() ?
Avec epoll(), on utilise 3 appels système :
1️⃣ epoll_create1() → Crée une instance epoll.
2️⃣ epoll_ctl() → Ajoute/supprime/modifie des sockets à surveiller.
3️⃣ epoll_wait() → Attend un événement sur les sockets enregistrés.

3️⃣ Implémentation détaillée de epoll() en C
Voici comment écrire un serveur web ultra-rapide en utilisant epoll() pour gérer plusieurs clients ! 🚀

📌 Étape 1 : Création de l'instance epoll
c
Copy
Edit
int epoll_fd = epoll_create1(0);
if (epoll_fd == -1) {
    perror("epoll_create1");
    exit(EXIT_FAILURE);
}
✅ epoll_create1(0) crée un objet epoll et retourne un descripteur de fichier (epoll_fd).

📌 Étape 2 : Ajouter un socket à surveiller
c
Copy
Edit
struct epoll_event event;
event.events = EPOLLIN; // On surveille les entrées (données à lire)
event.data.fd = server_socket;

if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, server_socket, &event) == -1) {
    perror("epoll_ctl: server_socket");
    exit(EXIT_FAILURE);
}
✅ epoll_ctl() enregistre le socket du serveur pour être notifié quand un client se connecte.

📌 Étape 3 : Boucle principale avec epoll_wait()
c
Copy
Edit
struct epoll_event events[MAX_EVENTS];

while (1) {
    int num_ready = epoll_wait(epoll_fd, events, MAX_EVENTS, -1);
    if (num_ready == -1) {
        perror("epoll_wait");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < num_ready; i++) {
        if (events[i].data.fd == server_socket) {
            // Accepter une nouvelle connexion client
            int client_socket = accept(server_socket, NULL, NULL);
            event.events = EPOLLIN | EPOLLET; // Mode Edge Triggered (explication après)
            event.data.fd = client_socket;
            epoll_ctl(epoll_fd, EPOLL_CTL_ADD, client_socket, &event);
        } else {
            // Lire la requête du client et traiter la réponse
            handle_client(events[i].data.fd);
        }
    }
}
✅ epoll_wait() attend qu'un événement se produise sur un socket actif.
✅ Dès qu’un client envoie des données, epoll_wait() réveille le serveur immédiatement.

4️⃣ Modes de fonctionnement de epoll() : Edge Triggered vs Level Triggered
🔵 Level-Triggered (LT) (Par défaut)
epoll_wait() renvoie un événement tant qu’il y a des données à lire.

Fonctionne comme select(), mais en plus rapide.

💡 Exemple :
Si un socket a 10 Ko de données disponibles mais qu'on ne lit que 5 Ko, epoll_wait() renverra encore un événement la prochaine fois (car il reste 5 Ko).

🔴 Edge-Triggered (ET) (Ultra-performant)
epoll_wait() notifie uniquement quand il y a un nouvel événement.

Le socket ne sera plus notifié tant que toutes les données n'ont pas été lues !

💡 Exemple :
Si un socket a 10 Ko de données et qu'on ne lit que 5 Ko, epoll_wait() ne sera plus déclenché ! Il faut lire tout en une seule fois.

📌 Pourquoi utiliser Edge-Triggered (ET) ?
✅ Moins d’appels système = Meilleures performances ! 🚀
❌ Plus difficile à gérer car il faut toujours vider le socket.

5️⃣ Optimisation avec EPOLLEXCLUSIVE
Sur un serveur avec plusieurs threads, on peut utiliser EPOLLEXCLUSIVE pour éviter le réveil inutile de tous les threads quand un seul peut traiter la requête.

c
Copy
Edit
event.events = EPOLLIN | EPOLLEXCLUSIVE;
epoll_ctl(epoll_fd, EPOLL_CTL_ADD, server_socket, &event);
✅ Empêche plusieurs threads de s’occuper du même socket en même temps.

6️⃣ Comparaison avec d'autres méthodes
Méthode	Utilisation CPU	Scalabilité	Facilité
select()	🔴 Élevée	❌ Mauvaise	✅ Facile
poll()	🟠 Moyenne	❌ Mauvaise	✅ Facile
epoll() (LT)	🟢 Faible	✅ Excellente	✅ Facile
epoll() (ET)	🟢 Super faible	✅ Excellente	❌ Complexe
📌 epoll() est le meilleur choix pour les serveurs performants, comme Nginx, Redis ou Node.js ! 🚀

📌 Conclusion : Pourquoi utiliser epoll() ?
✅ Performant : Gère 100 000+ connexions simultanées sans problème.
✅ Événements asynchrones : Ne scanne que les sockets actifs.
✅ Utilisé par les plus grands serveurs web (Nginx, Node.js, etc.).
❌ Spécifique à Linux (pas dispo sur Windows).

👉 Si tu veux coder un serveur ultra-rapide, utilise epoll() ! 🚀🔥


